buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath deps.tools.vfs
        classpath deps.tools.httpclient
        classpath deps.tools.swaggerPlugin
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.ysb33r.vfs'
apply plugin: 'org.hidetake.swagger.generator'
apply plugin: 'eclipse'
apply from: rootProject.file('gradle/convention.gradle')
apply from: rootProject.file('gradle/dependencies.gradle')
apply from: rootProject.file('gradle/publish-jar.gradle')

repositories {
    jcenter()
}

dependencies {
    swaggerCodegen deps.swagger.v2.cli
    compile deps.swagger.v2.annotations

    implementation deps.codegen.feignCore
    implementation deps.codegen.feignJackson
    implementation deps.codegen.feignLogging
    implementation deps.codegen.feignForm
    implementation deps.codegen.jacksonJsr310
    implementation deps.codegen.oltuOauth2

    testImplementation deps.test.spockCore
    testRuntime deps.test.cglibNodep
    testRuntime deps.test.objenesis
}

def spec = file("${project.getProjectDir()}/resources/st-api.yml")
def swaggerConfig = file("${project.getProjectDir()}/resources/config.json")
def swaggerOutput = file("${project.getBuildDir().path}/gen")

// Define Java code generation tasks
// For models-only generation, use 'jersey2' as it has no default serializer
swaggerSources {
    apis {
        inputFile = spec
        code {
            language = 'java'
            configFile = swaggerConfig
            outputDir = swaggerOutput
            components = ['models', 'apis', 'supportingFiles']
            dependsOn validation
        }
    }
}

// Disallow CheckStyle from analyzing generated classes by setting
// the source to the non-generated directories
checkstyleMain.source = "${project.getProjectDir()}/src/main/java"

// Insert generated code into the sourceSets
sourceSets.main.java.srcDir "${swaggerSources.apis.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.apis.code.outputDir}/src/main/resources"

// Generate classes prior to compileJava
compileJava.dependsOn swaggerSources.apis.code

// Automatically generate models when IntelliJ loads the project
ideaModule.dependsOn generateSwaggerCode

task githubJavadoc(type: Javadoc, dependsOn: generateSwaggerCode) {
    source = sourceSets.main.allJava
    destinationDir = rootProject.file('docs/smartthings-client/javadoc')
    options.addBooleanOption("notimestamp", true)
}
