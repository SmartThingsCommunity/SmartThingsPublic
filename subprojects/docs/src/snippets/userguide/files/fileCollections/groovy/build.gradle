import java.nio.file.Paths

// tag::simple-params[]
FileCollection collection = layout.files('src/file1.txt',
                                  new File('src/file2.txt'),
                                  ['src/file3.csv', 'src/file4.csv'],
                                  Paths.get('src', 'file5.txt'))
// end::simple-params[]

file('src').mkdirs()
file('src/dir1').mkdirs()
file('src/file1.txt').mkdirs()
file('src2').mkdirs()
file('src2/dir1').mkdirs()
file('src2/dir2').mkdirs()

// tag::closure[]
task list {
    doLast {
        File srcDir

        // Create a file collection using a closure
        collection = layout.files { srcDir.listFiles() }

        srcDir = file('src')
        println "Contents of $srcDir.name"
        collection.collect { relativePath(it) }.sort().each { println it }

        srcDir = file('src2')
        println "Contents of $srcDir.name"
        collection.collect { relativePath(it) }.sort().each { println it }
    }
}
// end::closure[]

task usage {
    doLast {
        collection = layout.files('src/file1.txt')

        // tag::usage[]
        // Iterate over the files in the collection
        collection.each { File file ->
            println file.name
        }

        // Convert the collection to various types
        Set set = collection.files
        Set set2 = collection as Set
        List list = collection as List
        String path = collection.asPath
        File file = collection.singleFile

        // Add and subtract collections
        def union = collection + layout.files('src/file2.txt')
        def difference = collection - layout.files('src/file2.txt')

        // end::usage[]
    }
}

task filterTextFiles {
    doLast {
        // tag::filtering-file-collections[]
        FileCollection textFiles = collection.filter { File f ->
            f.name.endsWith(".txt")
        }
        // end::filtering-file-collections[]

        textFiles.collect { relativePath(it) }.sort().each { String path ->
            println path
        }

        assert textFiles.files*.name.sort()  == ['file1.txt', 'file2.txt', 'file5.txt']
    }
}
