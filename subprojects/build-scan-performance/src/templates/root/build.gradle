/*
 * Copyright 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// We want to double check that a build failure is
// only caused by failing test executions
gradle.buildFinished { result ->
    buildDir.mkdirs()
    if(result.failure) {
        def unexpectedFailure = (result.failure instanceof org.gradle.execution.MultipleBuildFailures && result.failure.causes.every { cause ->
            def failureMessage = cause?.cause?.cause?.message
            !failureMessage?.contains("There were failing tests")
        }
        )
        if(unexpectedFailure) {
            StringWriter errors = new StringWriter();
            result.failure.printStackTrace(new PrintWriter(errors));
            buildDir.mkdirs()
            new File(buildDir, "error.log").text = errors.toString()
        }
    }
}
