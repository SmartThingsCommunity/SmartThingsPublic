/*
 * Copyright 2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import japicmp.model.JApiChangeStatus
import me.champeau.gradle.japicmp.JapicmpTask
import org.gradle.binarycompatibility.AcceptedApiChanges
import org.gradle.binarycompatibility.BinaryCompatibilityHelper
import org.gradle.binarycompatibility.CleanAcceptedApiChanges
import org.gradle.binarycompatibility.transforms.ExplodeZipAndFindJars
import org.gradle.binarycompatibility.transforms.FindGradleClasspath
import org.gradle.binarycompatibility.transforms.FindGradleJar
import org.gradle.gradlebuild.ProjectGroups
import org.gradle.gradlebuild.PublicApi

import static org.gradle.api.attributes.Usage.USAGE_ATTRIBUTE

repositories {
    ['distributions', 'distributions-snapshots'].each { distUrl ->
        ivy {
            name 'Gradle distributions'
            url 'https://services.gradle.org'
            patternLayout {
                artifact "/${distUrl}/[module]-[revision]-bin(.[ext])"
            }
            metadataSources {
                artifact()
            }
            content {
                includeModule('gradle', 'gradle')
            }
        }
    }
}

ext {
    apiChangesJsonFile = project.file("src/changes/accepted-public-api-changes.json")
    acceptedViolations = AcceptedApiChanges.parse(apiChangesJsonFile.text)
    compatibilityBaselineVersion = Versioning_extensionsKt.getReleasedVersions(project).mostRecentRelease
}

def ARTIFACT_TYPE = Attribute.of('artifactType', String)

configurations {
    baseline
    baselineClasspath {
        extendsFrom baseline
        attributes.attribute(ARTIFACT_TYPE, 'gradle-classpath')
    }
}

def projects = ProjectGroups.INSTANCE.getPublicProjects(project).collect { it.archivesBaseName - 'gradle-' }

dependencies {
    baseline "gradle:gradle:${compatibilityBaselineVersion}@zip"

    // This transform takes the Gradle zip distribution,
    // and unzips the Gradle jar files that it contains in a directory
    registerTransform(ExplodeZipAndFindJars) {
        from.attribute(ARTIFACT_TYPE, 'zip')
        to.attribute(ARTIFACT_TYPE, 'gradle-libs-dir')
    }
    registerTransform(FindGradleClasspath) {
        from.attribute(ARTIFACT_TYPE, 'gradle-libs-dir')
        to.attribute(ARTIFACT_TYPE, 'gradle-classpath')
    }

    projects.each { projectName ->
        // This transform uses the result of the exploded zip extraction
        // and returns a single jar file based on the lookup project name
        registerTransform(FindGradleJar) {
            from.attribute(ARTIFACT_TYPE, 'gradle-libs-dir')
            to.attribute(ARTIFACT_TYPE, projectName)
            parameters {
                target = projectName
            }
        }
    }
}

def baselineConfigurations = []
projects.each { projectName ->
    def appendixName = projectName.split('-')*.capitalize().join('')
    baselineConfigurations << configurations.create("japicmp-baseline-${appendixName}") {
        extendsFrom configurations.baseline
        attributes.attribute(ARTIFACT_TYPE, projectName)
    }
}

configurations {
    currentClasspath {
        canBeConsumed = false
        canBeResolved = true
        description = "Classpath to check binary compatibility against"
        attributes.attribute(USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
    }
}

dependencies {
    // TODO: Current classpath should be derived from the other "Gradle runtime" sources like api-metadata, runtime-api, distribution building, etc...
    currentClasspath ProjectGroups.INSTANCE.getPublicProjects(project)
}

def buildVersion = rootProject.buildVersion
def baseVersion = buildVersion.baseVersion
def isSnapshot = buildVersion.isSnapshot
def checkBinaryCompatibility = tasks.register("checkBinaryCompatibility", JapicmpTask) {
    dependsOn ProjectGroups.INSTANCE.getPublicProjects(project).jar

    Set<File> apiSourceFolders = ProjectGroups.INSTANCE.getPublicJavaProjects(project).collectMany { Project p ->
        p.sourceSets.main.allJava.srcDirs + (p.plugins.hasPlugin("kotlin") ? p.sourceSets.main.kotlin.srcDirs : [])
    }

    inputs.property('acceptedViolations', acceptedViolations.toAcceptedChangesMap())
    inputs.property("baseline.version", compatibilityBaselineVersion)
    inputs.property("currentVersion", baseVersion)
    inputs.files("apiSourceFolders", apiSourceFolders)

    oldClasspath = configurations.baselineClasspath
    newClasspath = configurations.currentClasspath
    oldArchives = files(baselineConfigurations)
    newArchives = files(ProjectGroups.INSTANCE.getPublicProjects(project).jar)

    // binary breaking change checking setup
    onlyModified = false
    failOnModification = false // we rely on the custom report to fail or not
    ignoreMissingClasses = true // because of a missing scala.runtime.AbstractFunction0 class
    richReport {
        includedClasses = toPatterns(PublicApi.includes + PublicKotlinDslApi.includes)
        excludedClasses = toPatterns(PublicApi.excludes + PublicKotlinDslApi.excludes)

        title = "Binary compatibility report for Gradle ${isSnapshot ? "${baseVersion}-SNAPSHOT" : version} since ${compatibilityBaselineVersion}"
        destinationDir = file("$buildDir/reports/binary-compatibility")
        reportName = "report.html"
    }

    BinaryCompatibilityHelper.setupJApiCmpRichReportRules(delegate, acceptedViolations, apiSourceFolders, baseVersion)
}
tasks.named("check").configure { dependsOn(checkBinaryCompatibility) }

tasks.register("cleanAcceptedApiChanges", CleanAcceptedApiChanges) {
    description = 'Cleans up all existing accepted API changes.'
    jsonFile = apiChangesJsonFile
}

static List<String> toPatterns(List<String> packages) {
    packages.collect {
        it.replaceAll('\\*\\*', '###')
            .replaceAll('/\\*', '/[A-Z][a-z_A-Z0-9]+')
            .replaceAll('$', '\\$')
            .replaceAll('/', '[.]')
            .replaceAll('###', '.*?')
    }
}
