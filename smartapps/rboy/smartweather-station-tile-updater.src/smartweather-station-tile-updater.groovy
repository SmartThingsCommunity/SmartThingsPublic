/*
 * -----------------------
 * ------ SMART APP ------
 * -----------------------
 *
 * STOP:  Do NOT PUBLISH the code to GitHub, it is a VIOLATION of the license terms.
 * You are NOT allowed share, distribute, reuse or publicly host (e.g. GITHUB) the code. Refer to the license details on our website.
 *
 */

/* **DISCLAIMER**
* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
* Without limitation of the foregoing, Contributors/Regents expressly does not warrant that:
* 1. the software will meet your requirements or expectations;
* 2. the software or the software content will be free of bugs, errors, viruses or other defects;
* 3. any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
* 4. the software will be compatible with third party software;
* 5. any errors in the software will be corrected.
* The user assumes all responsibility for selecting the software and for the results obtained from the use of the software. The user shall bear the entire risk as to the quality and the performance of the software.
*/ 
 
def clientVersion() {
    return "01.07.03"
}

/**
*  Weather Station Controller
*
* Copyright RBoy Apps
* 2017-10-13 - (v01.07.03) Patch for Android 2.7.0 app broken causing error
* 2017-10-09 - (v01.07.02) Patch for platform update
* 2017-10-03 - Delayed check to avoid error
* 2017-5-26 - Added automatic update notifications
* 2016-3-3 - Set to use runEvery5Minutes and hopefully more reliable
* 2016-2-12 - Changed scheduling API's (hopefully more resilient), added an option for users to specify update interval
* 2016-1-20 - Kick start timers on sunrise and sunset also
* 2015-10-4 - Kick start timers on each mode change to prevent them from dying
* 2015-7-12 - Simplified app, udpates every 5 minutes now (hopefully more reliable)
* 2015-7-17 - Improved reliability when mode changes
* 2015-6-6 - Bugfix for timers not scheduling, keep only one timer
*			 Added support to update multiple devices
*			 Added support for frequency of updates            
*
*/

definition(
    name: "SmartWeather Station Tile Updater",
    namespace: "rboy",
    author: "RBoy Apps",
    description: "Updates SmartWeather Station Tile devices every 5 minutes. This contains a bug fix for the updates stops when user select custom modes and it updates every 5 minutes",
    category: "Convenience",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/SafetyAndSecurity/App-MindYourHome.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/SafetyAndSecurity/App-MindYourHome@2x.png"
)

preferences {
    // dynamic pages broken in Android 2.7.0 for type device.smartweatherStationTile, revert to static page for now
    //page(name: "mainPage")
    section ("Weather Devices") {
        input name: "weatherDevices", type: "device.smartweatherStationTile", title: "Select Weather Device(s)", description: "Select the Weather Tiles to update", required: true, multiple: true
        //input name: "updateInterval", type: "number", title: "Enter update frequency (minutes)", description: "How often do you want to update the weather information", range: "1..*", required: true, defaultValue: 5
    }

    section() {
        input name: "disableUpdateNotifications", title: "Don't check for new versions of the app", type: "bool", required: false
    }

    section("Name & Operating Modes (optional)") {
    }
}

/*def mainPage() {
    log.trace "$settings"

    dynamicPage(name: "mainPage", title: "SmartWeather Station Tile Updater v${clientVersion()}", install: true, uninstall: true) {
        section ("Weather Devices") {
            input name: "weatherDevices", type: "device.smartweatherStationTile", title: "Select Weather Device(s)", description: "Select the Weather Tiles to update", required: true, multiple: true
            //input name: "updateInterval", type: "number", title: "Enter update frequency (minutes)", description: "How often do you want to update the weather information", range: "1..*", required: true, defaultValue: 5
        }
        
        section("Operating Modes (optional)") {
            mode title: "Enable only when in this mode(s)", required: false, multiple: true
        }

        section() {
            label title: "Assign a name for this SmartApp (optional)", required: false
            input name: "disableUpdateNotifications", title: "Don't check for new versions of the app", type: "bool", required: false
        }
    }
}*/

def installed() {
    log.debug "Installed with settings: ${settings}"

    initialize()
}

def updated() {
    log.debug "Updated with settings: ${settings}"

    unsubscribe()
    unschedule()
    initialize()
}

def initialize() {
    // Check for new versions of the code
    def random = new Random()
    Integer randomHour = random.nextInt(18-10) + 10
    Integer randomDayOfWeek = random.nextInt(7-1) + 1 // 1 to 7
    schedule("0 0 " + randomHour + " ? * " + randomDayOfWeek, checkForCodeUpdate) // Check for code updates once a week at a random day and time between 10am and 6pm

    subscribe(location, modeChangeHandler)
    subscribe(location, "sunset", modeChangeHandler)
    subscribe(location, "sunrise", modeChangeHandler)
    runEvery5Minutes(scheduledEvent)
    runIn(1, scheduledEvent)
}

def modeChangeHandler(evt) {
    log.debug "Reinitializing refresh timers on mode change notification, new mode $evt.value"
    runEvery5Minutes(scheduledEvent)
    runIn(1, scheduledEvent)
}

def scheduledEvent() {
    //log.trace "Refresh weather, update frequency $updateInterval minutes"
    log.trace "Refresh weather, update frequency 5 minutes"
    //runIn(updateInterval*60, scheduledEvent)
    weatherDevices*.refresh()
}

def checkForCodeUpdate(evt) {
    log.trace "Getting latest version data from the RBoy Apps server"
    
    def appName = "SmartWeather Station Tile Updater"
    def serverUrl = "http://smartthings.rboyapps.com"
    def serverPath = "/CodeVersions.json"
    
    try {
        httpGet([
            uri: serverUrl,
            path: serverPath
        ]) { ret ->
            log.trace "Received response from RBoy Apps Server, headers=${ret.headers.'Content-Type'}, status=$ret.status"
            //ret.headers.each {
            //    log.trace "${it.name} : ${it.value}"
            //}

            if (ret.data) {
                log.trace "Response>" + ret.data
                
                // Check for app version updates
                def appVersion = ret.data?."$appName"
                if (appVersion > clientVersion()) {
                    def msg = "New version of app ${app.label} available: $appVersion, current version: ${clientVersion()}.\nPlease visit $serverUrl to get the latest version."
                    log.info msg
                    if (!disableUpdateNotifications) {
                        sendPush(msg)
                    }
                } else {
                    log.trace "No new app version found, latest version: $appVersion"
                }
                
                // Check device handler version updates
                def caps = []
                caps?.each {
                    def devices = it?.findAll { it.hasAttribute("codeVersion") }
                    for (device in devices) {
                        if (device) {
                            def deviceName = device?.currentValue("dhName")
                            def deviceVersion = ret.data?."$deviceName"
                            if (deviceVersion && (deviceVersion > device?.currentValue("codeVersion"))) {
                                def msg = "New version of device ${device?.displayName} available: $deviceVersion, current version: ${device?.currentValue("codeVersion")}.\nPlease visit $serverUrl to get the latest version."
                                log.info msg
                                if (!disableUpdateNotifications) {
                                    sendPush(msg)
                                }
                            } else {
                                log.trace "No new device version found for $deviceName, latest version: $deviceVersion, current version: ${device?.currentValue("codeVersion")}"
                            }
                        }
                    }
                }
            } else {
                log.error "No response to query"
            }
        }
    } catch (e) {
        log.error "Exception while querying latest app version: $e"
    }
}